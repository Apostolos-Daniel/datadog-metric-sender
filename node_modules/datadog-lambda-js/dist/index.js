"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitTelemetryOnErrorOutsideHandler = exports.getEnvValue = exports.getTraceHeaders = exports.sendDistributionMetric = exports.sendDistributionMetricWithDate = exports.extractArgs = exports.datadog = exports._metricsQueue = exports.defaultConfig = exports.localTestingEnvVar = exports.coldStartTraceSkipLibEnvVar = exports.minColdStartTraceDurationEnvVar = exports.coldStartTracingEnvVar = exports.decodeAuthorizerContextEnvVar = exports.encodeAuthorizerContextEnvVar = exports.defaultSiteURL = exports.traceExtractorEnvVar = exports.mergeXrayTracesEnvVar = exports.lambdaTaskRootEnvVar = exports.datadogHandlerEnvVar = exports.enhancedMetricsEnvVar = exports.logInjectionEnvVar = exports.logForwardingEnvVar = exports.logLevelEnvVar = exports.siteURLEnvVar = exports.traceManagedServicesEnvVar = exports.captureLambdaPayloadMaxDepthEnvVar = exports.captureLambdaPayloadEnvVar = exports.apiKeyKMSEnvVar = exports.apiKeyEnvVar = void 0;
var constants_1 = require("./constants");
var metrics_1 = require("./metrics");
var trace_1 = require("./trace");
var runtime_1 = require("./runtime");
var utils_1 = require("./utils");
var enhanced_metrics_1 = require("./metrics/enhanced-metrics");
var span_wrapper_1 = require("./trace/span-wrapper");
var tracer_wrapper_1 = require("./trace/tracer-wrapper");
exports.apiKeyEnvVar = "DD_API_KEY";
exports.apiKeyKMSEnvVar = "DD_KMS_API_KEY";
exports.captureLambdaPayloadEnvVar = "DD_CAPTURE_LAMBDA_PAYLOAD";
exports.captureLambdaPayloadMaxDepthEnvVar = "DD_CAPTURE_LAMBDA_PAYLOAD_MAX_DEPTH";
exports.traceManagedServicesEnvVar = "DD_TRACE_MANAGED_SERVICES";
exports.siteURLEnvVar = "DD_SITE";
exports.logLevelEnvVar = "DD_LOG_LEVEL";
exports.logForwardingEnvVar = "DD_FLUSH_TO_LOG";
exports.logInjectionEnvVar = "DD_LOGS_INJECTION";
exports.enhancedMetricsEnvVar = "DD_ENHANCED_METRICS";
exports.datadogHandlerEnvVar = "DD_LAMBDA_HANDLER";
exports.lambdaTaskRootEnvVar = "LAMBDA_TASK_ROOT";
exports.mergeXrayTracesEnvVar = "DD_MERGE_XRAY_TRACES";
exports.traceExtractorEnvVar = "DD_TRACE_EXTRACTOR";
exports.defaultSiteURL = "datadoghq.com";
exports.encodeAuthorizerContextEnvVar = "DD_ENCODE_AUTHORIZER_CONTEXT";
exports.decodeAuthorizerContextEnvVar = "DD_DECODE_AUTHORIZER_CONTEXT";
exports.coldStartTracingEnvVar = "DD_COLD_START_TRACING";
exports.minColdStartTraceDurationEnvVar = "DD_MIN_COLD_START_DURATION";
exports.coldStartTraceSkipLibEnvVar = "DD_COLD_START_TRACE_SKIP_LIB";
exports.localTestingEnvVar = "DD_LOCAL_TESTING";
exports.defaultConfig = {
    apiKey: "",
    apiKeyKMS: "",
    autoPatchHTTP: true,
    captureLambdaPayload: false,
    captureLambdaPayloadMaxDepth: 10,
    createInferredSpan: true,
    debugLogging: false,
    encodeAuthorizerContext: true,
    decodeAuthorizerContext: true,
    enhancedMetrics: true,
    forceWrap: false,
    injectLogContext: true,
    logForwarding: false,
    mergeDatadogXrayTraces: false,
    shouldRetryMetrics: false,
    siteURL: "",
    minColdStartTraceDuration: 3,
    coldStartTraceSkipLib: "",
    localTesting: false,
};
exports._metricsQueue = new metrics_1.MetricsQueue();
var currentMetricsListener;
var currentTraceListener;
if (getEnvValue(exports.coldStartTracingEnvVar, "true").toLowerCase() === "true") {
    (0, runtime_1.subscribeToDC)();
}
var initTime = Date.now();
/**
 * Wraps your AWS lambda handler functions to add tracing/metrics support
 * @param handler A lambda handler function.
 * @param config Configuration options for datadog.
 * @returns A wrapped handler function.
 *
 * ```javascript
 * import { datadog } from 'datadog-lambda-js';
 * function yourHandler(event) {}
 * exports.yourHandler = datadog(yourHandler);
 * ```
 */
function datadog(handler, config) {
    var _this = this;
    var finalConfig = getConfig(config);
    var metricsListener = new metrics_1.MetricsListener(new metrics_1.KMSService(), finalConfig);
    var traceListener = new trace_1.TraceListener(finalConfig);
    // Only wrap the handler once unless forced
    var _ddWrappedKey = "_ddWrapped";
    if (handler[_ddWrappedKey] !== undefined && !finalConfig.forceWrap) {
        return handler;
    }
    (0, utils_1.setLogLevel)(finalConfig.debugLogging ? utils_1.LogLevel.DEBUG : utils_1.LogLevel.ERROR);
    if (finalConfig.logger) {
        (0, utils_1.setLogger)(finalConfig.logger);
    }
    var isResponseStreamFunction = handler[constants_1.HANDLER_STREAMING] !== undefined && handler[constants_1.HANDLER_STREAMING] === constants_1.STREAM_RESPONSE;
    var promHandler = (0, utils_1.promisifiedHandler)(handler);
    var wrappedFunc;
    wrappedFunc = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            var _a, event, context, responseStream, startTime, err_1, result, localResult, error, didThrow, traceListenerOnWrap, _b, err_2, err_3;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = extractArgs.apply(void 0, __spreadArray([isResponseStreamFunction], __read(args), false)), event = _a.event, context = _a.context, responseStream = _a.responseStream;
                        startTime = new Date();
                        (0, utils_1.setSandboxInit)(initTime, startTime.getTime());
                        currentMetricsListener = metricsListener;
                        currentTraceListener = traceListener;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, traceListener.onStartInvocation(event, context)];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, metricsListener.onStartInvocation(event, context)];
                    case 3:
                        _c.sent();
                        if (finalConfig.enhancedMetrics) {
                            (0, metrics_1.incrementInvocationsMetric)(metricsListener, context);
                        }
                        sendQueueMetrics(metricsListener);
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _c.sent();
                        if (err_1 instanceof Error) {
                            (0, utils_1.logDebug)("Failed to start listeners", err_1);
                        }
                        return [3 /*break*/, 5];
                    case 5:
                        didThrow = false;
                        _c.label = 6;
                    case 6:
                        _c.trys.push([6, 11, , 12]);
                        traceListenerOnWrap = function () {
                            var localArgs = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                localArgs[_i] = arguments[_i];
                            }
                            return __awaiter(_this, void 0, void 0, function () {
                                var _a, localEvent, localContext, localResponseStream, _b, responseIs5xxError;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            _a = extractArgs.apply(void 0, __spreadArray([isResponseStreamFunction], __read(localArgs), false)), localEvent = _a.event, localContext = _a.context, localResponseStream = _a.responseStream;
                                            if (isResponseStreamFunction) {
                                                responseStream.once("drain", function () {
                                                    var firstDrainTime = new Date();
                                                    var timeToFirstByte = firstDrainTime.getTime() - startTime.getTime();
                                                    metricsListener.sendDistributionMetric.apply(metricsListener, __spreadArray(["aws.lambda.enhanced.time_to_first_byte",
                                                        timeToFirstByte,
                                                        true], __read((0, enhanced_metrics_1.getEnhancedMetricTags)(context)), false));
                                                });
                                            }
                                            _c.label = 1;
                                        case 1:
                                            _c.trys.push([1, , 6, 7]);
                                            if (!isResponseStreamFunction) return [3 /*break*/, 3];
                                            return [4 /*yield*/, promHandler(localEvent, localResponseStream, localContext)];
                                        case 2:
                                            _b = _c.sent();
                                            return [3 /*break*/, 5];
                                        case 3: return [4 /*yield*/, promHandler(localEvent, localContext)];
                                        case 4:
                                            _b = _c.sent();
                                            _c.label = 5;
                                        case 5:
                                            localResult = _b;
                                            return [3 /*break*/, 7];
                                        case 6:
                                            responseIs5xxError = traceListener.onEndingInvocation(localEvent, localResult, isResponseStreamFunction);
                                            if (responseIs5xxError) {
                                                (0, metrics_1.incrementErrorsMetric)(metricsListener, context);
                                            }
                                            if ((0, utils_1.isBatchItemFailure)(localResult)) {
                                                (0, metrics_1.incrementBatchItemFailureMetric)(metricsListener, (0, utils_1.batchItemFailureCount)(localResult), context);
                                            }
                                            return [7 /*endfinally*/];
                                        case 7: return [2 /*return*/, localResult];
                                    }
                                });
                            });
                        };
                        if (!isResponseStreamFunction) return [3 /*break*/, 8];
                        return [4 /*yield*/, traceListener.onWrap(traceListenerOnWrap)(event, responseStream, context)];
                    case 7:
                        _b = _c.sent();
                        return [3 /*break*/, 10];
                    case 8: return [4 /*yield*/, traceListener.onWrap(traceListenerOnWrap)(event, context)];
                    case 9:
                        _b = _c.sent();
                        _c.label = 10;
                    case 10:
                        result = _b;
                        return [3 /*break*/, 12];
                    case 11:
                        err_2 = _c.sent();
                        didThrow = true;
                        error = err_2;
                        return [3 /*break*/, 12];
                    case 12:
                        _c.trys.push([12, 15, , 16]);
                        if (didThrow && finalConfig.enhancedMetrics) {
                            (0, metrics_1.incrementErrorsMetric)(metricsListener, context);
                        }
                        return [4 /*yield*/, metricsListener.onCompleteInvocation()];
                    case 13:
                        _c.sent();
                        return [4 /*yield*/, traceListener.onCompleteInvocation(error, result, event)];
                    case 14:
                        _c.sent();
                        return [3 /*break*/, 16];
                    case 15:
                        err_3 = _c.sent();
                        if (err_3 instanceof Error) {
                            (0, utils_1.logDebug)("Failed to complete listeners", err_3);
                        }
                        return [3 /*break*/, 16];
                    case 16:
                        currentMetricsListener = undefined;
                        currentTraceListener = undefined;
                        if (didThrow) {
                            throw error;
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    wrappedFunc[_ddWrappedKey] = true;
    if (isResponseStreamFunction) {
        wrappedFunc[constants_1.HANDLER_STREAMING] = constants_1.STREAM_RESPONSE;
    }
    return wrappedFunc;
}
exports.datadog = datadog;
/**
 *
 * @param isResponseStreamFunction A boolean determining if a Lambda Function is Response Stream.
 * @param args Spread arguments of a Lambda Function.
 * @returns An object containing the context and the event of a Lambda Function.
 */
function extractArgs(isResponseStreamFunction) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    var context = isResponseStreamFunction ? args[2] : args.length > 0 ? args[1] : {};
    var event = args[0];
    var responseStream = isResponseStreamFunction ? args[1] : undefined;
    return { context: context, event: event, responseStream: responseStream };
}
exports.extractArgs = extractArgs;
/**
 * Sends a Distribution metric asynchronously to the Datadog API.
 * @param name The name of the metric to send.
 * @param value The value of the metric
 * @param metricTime The timestamp associated with this metric data point.
 * @param tags The tags associated with the metric. Should be of the format "tag:value".
 */
function sendDistributionMetricWithDate(name, value, metricTime) {
    var tags = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        tags[_i - 3] = arguments[_i];
    }
    tags = __spreadArray(__spreadArray(__spreadArray([], __read(tags), false), [getRuntimeTag()], false), __read(getDDTags()), false);
    if (currentMetricsListener !== undefined) {
        currentMetricsListener.sendDistributionMetricWithDate.apply(currentMetricsListener, __spreadArray([name, value, metricTime, false], __read(tags), false));
        return;
    }
    exports._metricsQueue.push({ name: name, value: value, metricTime: metricTime, tags: tags });
}
exports.sendDistributionMetricWithDate = sendDistributionMetricWithDate;
/**
 * Sends a Distribution metric asynchronously to the Datadog API.
 * @param name The name of the metric to send.
 * @param value The value of the metric
 * @param tags The tags associated with the metric. Should be of the format "tag:value".
 */
function sendDistributionMetric(name, value) {
    var tags = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        tags[_i - 2] = arguments[_i];
    }
    tags = __spreadArray(__spreadArray([], __read(tags), false), [getRuntimeTag()], false);
    if (currentMetricsListener !== undefined) {
        currentMetricsListener.sendDistributionMetric.apply(currentMetricsListener, __spreadArray([name, value, false], __read(tags), false));
        return;
    }
    exports._metricsQueue.push({ name: name, value: value, tags: tags });
}
exports.sendDistributionMetric = sendDistributionMetric;
function sendQueueMetrics(listener) {
    // Reverse the queue to send metrics in order.
    // This is necessary because the "queue" is a stack,
    // and we want to send metrics in the order they were added.
    exports._metricsQueue.reverse();
    while (exports._metricsQueue.length > 0) {
        var metric = exports._metricsQueue.pop(); // This will always exist.
        var name = metric.name, value = metric.value, metricTime = metric.metricTime, tags = metric.tags;
        if (metricTime !== undefined) {
            listener.sendDistributionMetricWithDate.apply(listener, __spreadArray([name, value, metricTime, false], __read(tags), false));
            continue;
        }
        listener.sendDistributionMetric.apply(listener, __spreadArray([name, value, false], __read(tags), false));
    }
}
/**
 * Retrieves the Datadog headers for the current trace.
 */
function getTraceHeaders() {
    if (currentTraceListener === undefined) {
        return {};
    }
    return currentTraceListener.currentTraceHeaders;
}
exports.getTraceHeaders = getTraceHeaders;
function getConfig(userConfig) {
    var config;
    if (userConfig === undefined) {
        config = exports.defaultConfig;
    }
    else {
        config = __assign(__assign({}, exports.defaultConfig), userConfig);
    }
    if (config.apiKey === "") {
        config.apiKey = getEnvValue(exports.apiKeyEnvVar, "");
    }
    if (config.siteURL === "") {
        config.siteURL = getEnvValue(exports.siteURLEnvVar, exports.defaultSiteURL);
    }
    if (config.apiKeyKMS === "") {
        config.apiKeyKMS = getEnvValue(exports.apiKeyKMSEnvVar, "");
    }
    if (userConfig === undefined || userConfig.injectLogContext === undefined) {
        var result = getEnvValue(exports.logInjectionEnvVar, "true").toLowerCase();
        config.injectLogContext = result === "true";
    }
    if (userConfig === undefined || userConfig.debugLogging === undefined) {
        var result = getEnvValue(exports.logLevelEnvVar, "ERROR").toLowerCase();
        config.debugLogging = result === "debug";
    }
    if (userConfig === undefined || userConfig.logForwarding === undefined) {
        var result = getEnvValue(exports.logForwardingEnvVar, "false").toLowerCase();
        config.logForwarding = result === "true";
    }
    if (userConfig === undefined || userConfig.enhancedMetrics === undefined) {
        var result = getEnvValue(exports.enhancedMetricsEnvVar, "true").toLowerCase();
        config.enhancedMetrics = result === "true";
    }
    if (userConfig === undefined || userConfig.mergeDatadogXrayTraces === undefined) {
        var result = getEnvValue(exports.mergeXrayTracesEnvVar, "false").toLowerCase();
        config.mergeDatadogXrayTraces = result === "true";
    }
    if (userConfig === undefined || userConfig.captureLambdaPayload === undefined) {
        var result = getEnvValue(exports.captureLambdaPayloadEnvVar, "false").toLowerCase();
        config.captureLambdaPayload = result === "true";
    }
    if (userConfig === undefined || userConfig.createInferredSpan === undefined) {
        var result = getEnvValue(exports.traceManagedServicesEnvVar, "true").toLowerCase();
        config.createInferredSpan = result === "true";
    }
    if (userConfig === undefined || userConfig.encodeAuthorizerContext === undefined) {
        var result = getEnvValue(exports.encodeAuthorizerContextEnvVar, "true").toLowerCase();
        config.encodeAuthorizerContext = result === "true";
    }
    if (userConfig === undefined || userConfig.decodeAuthorizerContext === undefined) {
        var result = getEnvValue(exports.decodeAuthorizerContextEnvVar, "true").toLowerCase();
        config.decodeAuthorizerContext = result === "true";
    }
    if (userConfig === undefined || userConfig.minColdStartTraceDuration === undefined) {
        config.minColdStartTraceDuration = Number(getEnvValue(exports.minColdStartTraceDurationEnvVar, "3"));
    }
    if (userConfig === undefined || userConfig.minColdStartTraceDuration === undefined) {
        config.coldStartTraceSkipLib = getEnvValue(exports.coldStartTraceSkipLibEnvVar, "./opentracing/tracer");
    }
    if (userConfig === undefined || userConfig.captureLambdaPayloadMaxDepth === undefined) {
        config.captureLambdaPayloadMaxDepth = Number(getEnvValue(exports.captureLambdaPayloadMaxDepthEnvVar, "10"));
    }
    if (userConfig === undefined || userConfig.localTesting === undefined) {
        var result = getEnvValue(exports.localTestingEnvVar, "false").toLowerCase();
        // TODO deprecate 1 for truthy, this shouldn't have been allowed
        // but the extension allows it, so we must as well
        // @ts-ignore-next-line
        config.localTesting = result === "true" || result === "1";
    }
    return config;
}
function getEnvValue(key, defaultValue) {
    var val = process.env[key];
    return val !== undefined ? val : defaultValue;
}
exports.getEnvValue = getEnvValue;
function getRuntimeTag() {
    var version = process.version;
    return "dd_lambda_layer:datadog-node".concat(version);
}
function getDDTags() {
    var ddTags = getEnvValue("DD_TAGS", "").split(",");
    var ddService = getEnvValue("DD_SERVICE", "");
    if (ddService.length > 0) {
        ddTags.push("service:".concat(ddService));
    }
    var ddEnv = getEnvValue("DD_ENV", "");
    if (ddEnv.length > 0) {
        ddTags.push("env:".concat(ddEnv));
    }
    return ddTags;
}
function emitTelemetryOnErrorOutsideHandler(error, functionName, startTime) {
    return __awaiter(this, void 0, void 0, function () {
        var options, tracerWrapper, span, config, metricsListener;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (getEnvValue("DD_TRACE_ENABLED", "true").toLowerCase() === "true") {
                        options = {
                            tags: {
                                service: "aws.lambda",
                                operation_name: "aws.lambda",
                                resource_names: functionName,
                                "resource.name": functionName,
                                "span.type": "serverless",
                                "error.status": 500,
                                "error.type": error.name,
                                "error.message": error.message,
                                "error.stack": error.stack,
                            },
                            startTime: startTime,
                        };
                        tracerWrapper = new tracer_wrapper_1.TracerWrapper();
                        span = new span_wrapper_1.SpanWrapper(tracerWrapper.startSpan("aws.lambda", options), {});
                        span.finish();
                    }
                    config = getConfig();
                    if (!config.enhancedMetrics) return [3 /*break*/, 3];
                    metricsListener = new metrics_1.MetricsListener(new metrics_1.KMSService(), config);
                    return [4 /*yield*/, metricsListener.onStartInvocation(undefined)];
                case 1:
                    _a.sent();
                    (0, metrics_1.incrementErrorsMetric)(metricsListener);
                    return [4 /*yield*/, metricsListener.onCompleteInvocation()];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.emitTelemetryOnErrorOutsideHandler = emitTelemetryOnErrorOutsideHandler;
//# sourceMappingURL=index.js.map