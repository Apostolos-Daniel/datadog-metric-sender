"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanContextWrapper = void 0;
var utils_1 = require("../utils");
var trace_context_service_1 = require("./trace-context-service");
/**
 * SpanContextWrapper is a proxy class for DatadogSpanContext
 * defined in `dd-trace-js`.
 */
var SpanContextWrapper = /** @class */ (function () {
    function SpanContextWrapper(spanContext, source) {
        var _this = this;
        this.spanContext = spanContext;
        this.source = source;
        this.toString = function () {
            return {
                traceId: _this.toTraceId(),
                parentId: _this.toSpanId(),
                sampleMode: _this.sampleMode().toString(),
            }.toString();
        };
    }
    SpanContextWrapper.prototype.toSpanId = function () {
        return this.spanContext.toSpanId();
    };
    SpanContextWrapper.prototype.toTraceId = function () {
        return this.spanContext.toTraceId();
    };
    SpanContextWrapper.prototype.sampleMode = function () {
        var _a, _b;
        return (_b = (_a = this.spanContext._sampling) === null || _a === void 0 ? void 0 : _a.priority) !== null && _b !== void 0 ? _b : trace_context_service_1.SampleMode.AUTO_KEEP;
    };
    SpanContextWrapper.fromTraceContext = function (traceContext) {
        var traceId = traceContext.traceId || traceContext.traceID;
        if (traceId === undefined) {
            (0, utils_1.logDebug)("Unable to extract traceId", { traceContext: traceContext });
            return null;
        }
        var spanId = traceContext.parentId || traceContext.parentID;
        if (spanId === undefined) {
            (0, utils_1.logDebug)("Unable to extract spanId", { traceContext: traceContext });
            return null;
        }
        var samplingPriority = traceContext.sampleMode.toString(10);
        var source = traceContext.source;
        try {
            // Try requiring class from the tracer.
            var _DatadogSpanContext = require("dd-trace/packages/dd-trace/src/opentracing/span_context");
            var id = require("dd-trace/packages/dd-trace/src/id");
            return new SpanContextWrapper(new _DatadogSpanContext({
                traceId: id(traceId, 10),
                spanId: id(spanId, 10),
                sampling: { priority: samplingPriority },
            }), source);
        }
        catch (error) {
            if (error instanceof Error) {
                (0, utils_1.logDebug)("Couldn't generate SpanContext with tracer.", error);
            }
        }
        // No tracer is available, fallback to a mock class.
        // We can mock it, and it won't be parented since no
        // tracer is available, and we are conditionally checking on it.
        var _spanContext = {
            toSpanId: function () { return spanId; },
            toTraceId: function () { return traceId; },
            _sampling: {
                priority: samplingPriority,
            },
        };
        return new SpanContextWrapper(_spanContext, source);
    };
    return SpanContextWrapper;
}());
exports.SpanContextWrapper = SpanContextWrapper;
//# sourceMappingURL=span-context-wrapper.js.map