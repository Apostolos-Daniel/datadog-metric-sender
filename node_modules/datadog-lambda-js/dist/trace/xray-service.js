"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayService = exports.AMZN_TRACE_ID_ENV_VAR = void 0;
var crypto_1 = require("crypto");
var utils_1 = require("../utils");
var trace_context_service_1 = require("./trace-context-service");
var dgram_1 = require("dgram");
var span_context_wrapper_1 = require("./span-context-wrapper");
exports.AMZN_TRACE_ID_ENV_VAR = "_X_AMZN_TRACE_ID";
var AWS_XRAY_DAEMON_ADDRESS_ENV_VAR = "AWS_XRAY_DAEMON_ADDRESS";
var DD_TRACE_JAVA_TRACE_ID_PADDING = "00000000";
var XrayService = /** @class */ (function () {
    function XrayService() {
        this.subsegmentName = "datadog-metadata";
        this.subsegmentNamespace = "datadog";
        this.baggageSubsegmentKey = "root_span_metadata";
        this.subsegmentKey = "trace";
        this.lambdaFunctionTagsKey = "lambda_function_tags";
    }
    XrayService.prototype.addLambdaTriggerTags = function (triggerTags) {
        this.add(this.lambdaFunctionTagsKey, triggerTags);
    };
    XrayService.prototype.addStepFunctionContext = function (context) {
        this.add(this.baggageSubsegmentKey, context);
    };
    XrayService.prototype.addMetadata = function (metadata) {
        this.add(this.subsegmentKey, metadata);
    };
    XrayService.prototype.add = function (key, metadata) {
        var subsegment = this.generateSubsegment(key, metadata);
        if (subsegment === undefined)
            return;
        this.sendSubsegment(subsegment);
    };
    XrayService.prototype.generateSubsegment = function (key, metadata) {
        var _a, _b;
        var context = this.parseTraceContextHeader();
        if (context === undefined)
            return;
        var sampled = this.convertToSampleMode(parseInt(context.sampled, 10));
        if (sampled === trace_context_service_1.SampleMode.USER_REJECT || sampled === trace_context_service_1.SampleMode.AUTO_REJECT) {
            (0, utils_1.logDebug)("Discarding Xray metadata subsegment due to sampling");
            return;
        }
        var milliseconds = Date.now() * 0.001;
        return JSON.stringify({
            id: (0, crypto_1.randomBytes)(8).toString("hex"),
            trace_id: context.traceId,
            parent_id: context.parentId,
            name: this.subsegmentName,
            start_time: milliseconds,
            end_time: milliseconds,
            type: "subsegment",
            metadata: (_a = {},
                _a[this.subsegmentNamespace] = (_b = {},
                    _b[key] = metadata,
                    _b),
                _a),
        });
    };
    // Example: Root=1-5e272390-8c398be037738dc042009320;Parent=94ae789b969f1cc5;Sampled=1
    XrayService.parseAWSTraceHeader = function (awsTraceHeader) {
        var _a = __read(awsTraceHeader.split(";"), 3), root = _a[0], parent = _a[1], _sampled = _a[2];
        if (parent === undefined || _sampled === undefined)
            return;
        var _b = __read(root.split("="), 2), traceId = _b[1];
        var _c = __read(parent.split("="), 2), parentId = _c[1];
        var _d = __read(_sampled.split("="), 2), sampled = _d[1];
        if (traceId === undefined || parentId === undefined || sampled === undefined)
            return;
        return {
            traceId: traceId,
            parentId: parentId,
            sampled: sampled,
        };
    };
    XrayService.prototype.parseTraceContextHeader = function () {
        var header = process.env[exports.AMZN_TRACE_ID_ENV_VAR];
        if (header === undefined) {
            (0, utils_1.logDebug)("Couldn't read Xray trace header from env");
            return;
        }
        // Example: Root=1-5e272390-8c398be037738dc042009320;Parent=94ae789b969f1cc5;Sampled=1
        (0, utils_1.logDebug)("Reading Xray trace context from env var ".concat(header));
        return XrayService.parseAWSTraceHeader(header);
    };
    XrayService.prototype.convertToSampleMode = function (xraySampled) {
        return xraySampled === 1 ? trace_context_service_1.SampleMode.USER_KEEP : trace_context_service_1.SampleMode.USER_REJECT;
    };
    XrayService.prototype.sendSubsegment = function (segment) {
        var daemon = process.env[AWS_XRAY_DAEMON_ADDRESS_ENV_VAR];
        if (daemon === undefined) {
            (0, utils_1.logDebug)("Xray daemon env var not set, not sending subsegment");
            return;
        }
        var parts = daemon.split(":");
        if (parts.length <= 1) {
            (0, utils_1.logDebug)("X-Ray daemon env var has invalid format, not sending sub-segment");
            return;
        }
        var port = parseInt(parts[1], 10);
        var address = parts[0];
        var message = Buffer.from("{\"format\": \"json\", \"version\": 1}\n".concat(segment));
        var client;
        try {
            client = (0, dgram_1.createSocket)("udp4");
            // Send segment asynchronously to xray daemon
            client.send(message, 0, message.length, port, address, function (error, bytes) {
                client === null || client === void 0 ? void 0 : client.close();
                (0, utils_1.logDebug)("Xray daemon received metadata payload", { error: error, bytes: bytes });
            });
        }
        catch (error) {
            if (error instanceof Error) {
                client === null || client === void 0 ? void 0 : client.close();
                (0, utils_1.logDebug)("Error occurred submitting to Xray daemon", error);
            }
        }
    };
    XrayService.prototype.extract = function () {
        var traceContext = this.traceContext;
        if (traceContext === undefined)
            return null;
        var spanContext = span_context_wrapper_1.SpanContextWrapper.fromTraceContext(traceContext);
        if (spanContext === null)
            return null;
        (0, utils_1.logDebug)("Extracted trace context from xray context", { traceContext: traceContext });
        return spanContext;
    };
    Object.defineProperty(XrayService.prototype, "traceContext", {
        get: function () {
            var context = this.parseTraceContextHeader();
            if (context === undefined) {
                (0, utils_1.logDebug)("Couldn't parse Xray trace header from env");
                return;
            }
            var parentId = this.convertToParentId(context.parentId);
            if (parentId === undefined) {
                (0, utils_1.logDebug)("Couldn't parse Xray Parent Id", context);
                return;
            }
            var traceId = this.convertToTraceId(context.traceId);
            if (traceId === undefined) {
                (0, utils_1.logDebug)("Couldn't parse Xray Trace Id", context);
                return;
            }
            var sampleMode = this.convertToSampleMode(parseInt(context.sampled, 10));
            var trace = {
                traceId: traceId,
                parentId: parentId,
                sampleMode: sampleMode,
                source: trace_context_service_1.TraceSource.Xray,
            };
            return trace;
        },
        enumerable: false,
        configurable: true
    });
    XrayService.prototype.convertToParentId = function (xrayParentId) {
        if (xrayParentId.length !== 16)
            return;
        try {
            return BigInt("0x" + xrayParentId).toString(10);
        }
        catch (_) {
            (0, utils_1.logDebug)("Failed to convert Xray Parent Id ".concat(xrayParentId));
            return undefined;
        }
    };
    XrayService.prototype.convertToTraceId = function (xrayTraceId) {
        var parts = xrayTraceId.split("-");
        if (parts.length < 3)
            return;
        var lastPart = parts[2];
        if (lastPart.length !== 24)
            return;
        // We want to turn the last 63 bits into a decimal number in a string representation
        try {
            return (BigInt("0x" + lastPart) % BigInt("0x8000000000000000")).toString(10); // mod by 2^63 will leave us with the last 63 bits
        }
        catch (_) {
            (0, utils_1.logDebug)("Failed to convert Xray Trace Id ".concat(lastPart));
            return undefined;
        }
    };
    XrayService.extraceDDContextFromAWSTraceHeader = function (amznTraceId) {
        var awsContext = XrayService.parseAWSTraceHeader(amznTraceId);
        if (awsContext === undefined) {
            return null;
        }
        var traceIdParts = awsContext.traceId.split("-");
        if (traceIdParts && traceIdParts.length > 2 && traceIdParts[2].startsWith(DD_TRACE_JAVA_TRACE_ID_PADDING)) {
            // This AWSTraceHeader contains Datadog injected trace context
            return span_context_wrapper_1.SpanContextWrapper.fromTraceContext({
                traceId: hexStrToDecimalStr(traceIdParts[2].substring(8)),
                parentId: hexStrToDecimalStr(awsContext.parentId),
                sampleMode: parseInt(awsContext.sampled, 10),
                source: trace_context_service_1.TraceSource.Event, // This is still an event-source trace although we are getting it from xray trace header
            });
        }
        return null;
    };
    return XrayService;
}());
exports.XrayService = XrayService;
var hexStrToDecimalStr = function (hexString) { return BigInt("0x" + hexString).toString(10); };
//# sourceMappingURL=xray-service.js.map