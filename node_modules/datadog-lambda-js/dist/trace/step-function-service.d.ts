import { SpanContextWrapper } from "./span-context-wrapper";
interface NestedStepFunctionContext {
    execution_id: string;
    redrive_count: string;
    state_entered_time: string;
    state_name: string;
    root_execution_id: string;
    serverless_version: string;
}
interface LambdaRootStepFunctionContext {
    execution_id: string;
    redrive_count: string;
    state_entered_time: string;
    state_name: string;
    trace_id: string;
    dd_p_tid: string;
    serverless_version: string;
}
interface LegacyStepFunctionContext {
    execution_id: string;
    redrive_count: string;
    state_entered_time: string;
    state_name: string;
}
export type StepFunctionContext = NestedStepFunctionContext | LambdaRootStepFunctionContext | LegacyStepFunctionContext;
export declare const TRACE_ID = "traceId";
export declare const PARENT_ID = "spanId";
export declare const DD_P_TID = "_dd.p.tid";
export declare class StepFunctionContextService {
    private static _instance;
    context?: StepFunctionContext;
    private constructor();
    static instance(event?: any): StepFunctionContextService;
    static reset(): void;
    private setContext;
    get spanContext(): SpanContextWrapper | null;
    private deterministicSha256HashToBigIntString;
    private deterministicSha256Hash;
    private numberToBinaryString;
    private extractStateMachineContext;
    private isValidContextObject;
    /**
     * Parse a list of trace tags such as [_dd.p.tid=66bcb5eb00000000,_dd.p.dm=-0] and return the
     * value of the _dd.p.tid tag or an empty string if not found.
     */
    private parsePTid;
}
export {};
//# sourceMappingURL=step-function-service.d.ts.map