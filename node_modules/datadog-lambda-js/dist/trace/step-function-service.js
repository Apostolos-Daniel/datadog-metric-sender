"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StepFunctionContextService = exports.DD_P_TID = exports.PARENT_ID = exports.TRACE_ID = void 0;
var utils_1 = require("../utils");
var trace_context_service_1 = require("./trace-context-service");
var span_context_wrapper_1 = require("./span-context-wrapper");
var sha256_js_1 = require("@aws-crypto/sha256-js");
exports.TRACE_ID = "traceId";
exports.PARENT_ID = "spanId";
exports.DD_P_TID = "_dd.p.tid";
// Type Guard Functions
function isStepFunctionRootContext(obj) {
    return typeof (obj === null || obj === void 0 ? void 0 : obj.root_execution_id) === "string" && typeof (obj === null || obj === void 0 ? void 0 : obj.serverless_version) === "string";
}
function isLambdaRootContext(obj) {
    return (typeof (obj === null || obj === void 0 ? void 0 : obj.trace_id) === "string" &&
        typeof (obj === null || obj === void 0 ? void 0 : obj.dd_p_tid) === "string" &&
        typeof (obj === null || obj === void 0 ? void 0 : obj.serverless_version) === "string");
}
function isLegacyContext(obj) {
    return (typeof (obj === null || obj === void 0 ? void 0 : obj.execution_id) === "string" &&
        typeof (obj === null || obj === void 0 ? void 0 : obj.state_entered_time) === "string" &&
        typeof (obj === null || obj === void 0 ? void 0 : obj.state_name) === "string" &&
        (obj === null || obj === void 0 ? void 0 : obj.serverless_version) === undefined);
}
var StepFunctionContextService = /** @class */ (function () {
    function StepFunctionContextService(event) {
        this.setContext(event);
    }
    StepFunctionContextService.instance = function (event) {
        return this._instance || (this._instance = new this(event));
    };
    StepFunctionContextService.reset = function () {
        this._instance = undefined;
    };
    StepFunctionContextService.prototype.setContext = function (event) {
        var _a;
        // It is safe to mark this as a singleton since this method will be
        // always triggered by the same event.
        if (typeof event !== "object")
            return;
        // Extract Payload if available (Legacy lambda parsing)
        if (typeof ((_a = event === null || event === void 0 ? void 0 : event.Payload) === null || _a === void 0 ? void 0 : _a._datadog) === "object" || this.isValidContextObject(event === null || event === void 0 ? void 0 : event.Payload)) {
            event = event.Payload;
        }
        // Extract _datadog if available (JSONata v1 parsing)
        if (typeof event._datadog === "object") {
            event = event._datadog;
        }
        // Extract the common context variables
        var stateMachineContext = this.extractStateMachineContext(event);
        if (stateMachineContext === null)
            return;
        var execution_id = stateMachineContext.execution_id, redrive_count = stateMachineContext.redrive_count, state_entered_time = stateMachineContext.state_entered_time, state_name = stateMachineContext.state_name;
        if (typeof event["serverless-version"] === "string" && event["serverless-version"] === "v1") {
            if (typeof event.RootExecutionId === "string") {
                this.context = {
                    execution_id: execution_id,
                    redrive_count: redrive_count,
                    state_entered_time: state_entered_time,
                    state_name: state_name,
                    root_execution_id: event.RootExecutionId,
                    serverless_version: event["serverless-version"],
                };
            }
            else if (typeof event["x-datadog-trace-id"] === "string" && typeof event["x-datadog-tags"] === "string") {
                this.context = {
                    execution_id: execution_id,
                    redrive_count: redrive_count,
                    state_entered_time: state_entered_time,
                    state_name: state_name,
                    trace_id: event["x-datadog-trace-id"],
                    dd_p_tid: this.parsePTid(event["x-datadog-tags"]),
                    serverless_version: event["serverless-version"],
                };
            }
        }
        else {
            this.context = { execution_id: execution_id, redrive_count: redrive_count, state_entered_time: state_entered_time, state_name: state_name };
        }
    };
    Object.defineProperty(StepFunctionContextService.prototype, "spanContext", {
        get: function () {
            if (this.context === undefined)
                return null;
            var traceId;
            var ptid;
            if (isStepFunctionRootContext(this.context)) {
                traceId = this.deterministicSha256HashToBigIntString(this.context.root_execution_id, exports.TRACE_ID);
                ptid = this.deterministicSha256HashToBigIntString(this.context.root_execution_id, exports.DD_P_TID);
            }
            else if (isLambdaRootContext(this.context)) {
                traceId = this.context.trace_id;
                ptid = this.context.dd_p_tid;
            }
            else if (isLegacyContext(this.context)) {
                traceId = this.deterministicSha256HashToBigIntString(this.context.execution_id, exports.TRACE_ID);
                ptid = this.deterministicSha256HashToBigIntString(this.context.execution_id, exports.DD_P_TID);
            }
            else {
                (0, utils_1.logDebug)("StepFunctionContext doesn't match any known formats!");
                return null;
            }
            var redrivePostfix = this.context.redrive_count === "0" ? "" : "#".concat(this.context.redrive_count);
            var parentId = this.deterministicSha256HashToBigIntString(this.context.execution_id +
                "#" +
                this.context.state_name +
                "#" +
                this.context.state_entered_time +
                redrivePostfix, exports.PARENT_ID);
            var sampleMode = trace_context_service_1.SampleMode.AUTO_KEEP;
            try {
                // Try requiring class from the tracer.
                var _DatadogSpanContext = require("dd-trace/packages/dd-trace/src/opentracing/span_context");
                var id = require("dd-trace/packages/dd-trace/src/id");
                var ddSpanContext = new _DatadogSpanContext({
                    traceId: id(traceId, 10),
                    spanId: id(parentId, 10),
                    sampling: { priority: sampleMode.toString(2) },
                });
                ddSpanContext._trace.tags["_dd.p.tid"] = id(ptid, 10).toString(16);
                if (ddSpanContext === null)
                    return null;
                (0, utils_1.logDebug)("Extracted trace context from StepFunctionContext", { traceContext: ddSpanContext });
                return new span_context_wrapper_1.SpanContextWrapper(ddSpanContext, trace_context_service_1.TraceSource.Event);
            }
            catch (error) {
                if (error instanceof Error) {
                    (0, utils_1.logDebug)("Couldn't generate SpanContext with tracer.", error);
                }
                return null;
            }
        },
        enumerable: false,
        configurable: true
    });
    StepFunctionContextService.prototype.deterministicSha256HashToBigIntString = function (s, type) {
        var binaryString = this.deterministicSha256Hash(s, type);
        return BigInt("0b" + binaryString).toString();
    };
    StepFunctionContextService.prototype.deterministicSha256Hash = function (s, type) {
        // returns upper or lower 64 bits of the hash
        var _this = this;
        var hash = new sha256_js_1.Sha256();
        hash.update(s);
        var uint8Array = hash.digestSync();
        // type === SPAN_ID || type === DD_P_TID
        var intArray = uint8Array.subarray(0, 8);
        if (type === exports.TRACE_ID) {
            intArray = uint8Array.subarray(8, 16);
        }
        var binaryString = intArray.reduce(function (acc, num) { return acc + _this.numberToBinaryString(num); }, "");
        var res = "0" + binaryString.substring(1, 64);
        if (res === "0".repeat(64)) {
            return "1";
        }
        return res;
    };
    StepFunctionContextService.prototype.numberToBinaryString = function (num) {
        return num.toString(2).padStart(8, "0");
    };
    StepFunctionContextService.prototype.extractStateMachineContext = function (event) {
        if (this.isValidContextObject(event)) {
            return {
                execution_id: event.Execution.Id,
                redrive_count: event.Execution.RedriveCount.toString(),
                state_entered_time: event.State.EnteredTime,
                state_name: event.State.Name,
            };
        }
        (0, utils_1.logDebug)("Cannot extract StateMachine context! Invalid execution or state data.");
        return null;
    };
    StepFunctionContextService.prototype.isValidContextObject = function (context) {
        var _a, _b, _c, _d;
        return (typeof ((_a = context === null || context === void 0 ? void 0 : context.Execution) === null || _a === void 0 ? void 0 : _a.Id) === "string" &&
            typeof ((_b = context === null || context === void 0 ? void 0 : context.Execution) === null || _b === void 0 ? void 0 : _b.RedriveCount) === "number" &&
            typeof ((_c = context === null || context === void 0 ? void 0 : context.State) === null || _c === void 0 ? void 0 : _c.EnteredTime) === "string" &&
            typeof ((_d = context === null || context === void 0 ? void 0 : context.State) === null || _d === void 0 ? void 0 : _d.Name) === "string");
    };
    /**
     * Parse a list of trace tags such as [_dd.p.tid=66bcb5eb00000000,_dd.p.dm=-0] and return the
     * value of the _dd.p.tid tag or an empty string if not found.
     */
    StepFunctionContextService.prototype.parsePTid = function (traceTags) {
        var e_1, _a;
        if (traceTags) {
            try {
                for (var _b = __values(traceTags.split(",")), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tag = _c.value;
                    if (tag.includes("_dd.p.tid=")) {
                        return tag.split("=")[1];
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return "";
    };
    return StepFunctionContextService;
}());
exports.StepFunctionContextService = StepFunctionContextService;
//# sourceMappingURL=step-function-service.js.map