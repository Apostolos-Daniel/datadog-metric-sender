"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceContextExtractor = exports.DATADOG_SAMPLING_PRIORITY_HEADER = exports.DATADOG_PARENT_ID_HEADER = exports.DATADOG_TRACE_ID_HEADER = void 0;
var utils_1 = require("../../utils");
var xray_service_1 = require("../xray-service");
var extractors_1 = require("./extractors");
var step_function_service_1 = require("../step-function-service");
var event_validator_1 = require("../../utils/event-validator");
exports.DATADOG_TRACE_ID_HEADER = "x-datadog-trace-id";
exports.DATADOG_PARENT_ID_HEADER = "x-datadog-parent-id";
exports.DATADOG_SAMPLING_PRIORITY_HEADER = "x-datadog-sampling-priority";
var TraceContextExtractor = /** @class */ (function () {
    function TraceContextExtractor(tracerWrapper, config) {
        this.tracerWrapper = tracerWrapper;
        this.config = config;
        this.xrayService = new xray_service_1.XrayService();
    }
    TraceContextExtractor.prototype.extract = function (event, context) {
        return __awaiter(this, void 0, void 0, function () {
            var spanContext, customExtractor, eventExtractor, contextExtractor;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.stepFunctionContextService = step_function_service_1.StepFunctionContextService.instance(event);
                        spanContext = null;
                        if (!this.config.traceExtractor) return [3 /*break*/, 2];
                        customExtractor = new extractors_1.CustomTraceExtractor(this.config.traceExtractor);
                        return [4 /*yield*/, customExtractor.extract(event, context)];
                    case 1:
                        spanContext = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (spanContext === null) {
                            eventExtractor = this.getTraceEventExtractor(event);
                            if (eventExtractor !== undefined) {
                                spanContext = eventExtractor.extract(event);
                            }
                        }
                        if (spanContext === null) {
                            contextExtractor = new extractors_1.LambdaContextTraceExtractor(this.tracerWrapper);
                            spanContext = contextExtractor.extract(context);
                        }
                        if (spanContext !== null) {
                            this.addTraceContextToXray(spanContext);
                            return [2 /*return*/, spanContext];
                        }
                        return [2 /*return*/, this.xrayService.extract()];
                }
            });
        });
    };
    TraceContextExtractor.prototype.getTraceEventExtractor = function (event) {
        var _a;
        if (!event || typeof event !== "object")
            return;
        if (event.headers !== null && typeof event.headers === "object") {
            return new extractors_1.HTTPEventTraceExtractor(this.tracerWrapper, this.config.decodeAuthorizerContext);
        }
        if (event_validator_1.EventValidator.isSNSEvent(event))
            return new extractors_1.SNSEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isSNSSQSEvent(event))
            return new extractors_1.SNSSQSEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isEventBridgeSQSEvent(event))
            return new extractors_1.EventBridgeSQSEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isAppSyncResolverEvent(event))
            return new extractors_1.AppSyncEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isSQSEvent(event))
            return new extractors_1.SQSEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isKinesisStreamEvent(event))
            return new extractors_1.KinesisEventTraceExtractor(this.tracerWrapper);
        if (event_validator_1.EventValidator.isEventBridgeEvent(event))
            return new extractors_1.EventBridgeEventTraceExtractor(this.tracerWrapper);
        if ((_a = this.stepFunctionContextService) === null || _a === void 0 ? void 0 : _a.context)
            return new extractors_1.StepFunctionEventTraceExtractor();
        return;
    };
    TraceContextExtractor.prototype.addTraceContextToXray = function (spanContext) {
        var _a, _b;
        try {
            if (((_a = this.stepFunctionContextService) === null || _a === void 0 ? void 0 : _a.context) !== undefined) {
                this.xrayService.addStepFunctionContext(this.stepFunctionContextService.context);
                (0, utils_1.logDebug)("Added Step Function metadata to Xray metadata", { trace: spanContext });
                return;
            }
            var metadata = {
                "trace-id": spanContext.toTraceId(),
                "parent-id": spanContext.toSpanId(),
                "sampling-priority": spanContext.sampleMode(),
            };
            this.xrayService.addMetadata(metadata);
            (0, utils_1.logDebug)("Added trace context to Xray metadata", { trace: spanContext });
        }
        catch (error) {
            if (error instanceof Error) {
                if (((_b = this.stepFunctionContextService) === null || _b === void 0 ? void 0 : _b.context) !== undefined) {
                    (0, utils_1.logError)("Couldn't add Step Function metadata to Xray", error);
                    return;
                }
                (0, utils_1.logError)("Couldn't add trace context to xray metadata", error);
            }
        }
    };
    return TraceContextExtractor;
}());
exports.TraceContextExtractor = TraceContextExtractor;
//# sourceMappingURL=extractor.js.map