"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SNSEventTraceExtractor = void 0;
var utils_1 = require("../../../utils");
var xray_service_1 = require("../../xray-service");
var SNSEventTraceExtractor = /** @class */ (function () {
    function SNSEventTraceExtractor(tracerWrapper) {
        this.tracerWrapper = tracerWrapper;
    }
    SNSEventTraceExtractor.prototype.extract = function (event) {
        var _a, _b, _c, _d;
        try {
            // First try to extract trace context from message attributes
            var messageAttribute = (_d = (_c = (_b = (_a = event === null || event === void 0 ? void 0 : event.Records) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.Sns) === null || _c === void 0 ? void 0 : _c.MessageAttributes) === null || _d === void 0 ? void 0 : _d._datadog;
            if (messageAttribute === null || messageAttribute === void 0 ? void 0 : messageAttribute.Value) {
                var headers = void 0;
                if (messageAttribute.Type === "String") {
                    headers = JSON.parse(messageAttribute.Value);
                }
                else {
                    // Try decoding base64 values
                    var decodedValue = Buffer.from(messageAttribute.Value, "base64").toString("ascii");
                    headers = JSON.parse(decodedValue);
                }
                var traceContext = this.tracerWrapper.extract(headers);
                if (traceContext) {
                    (0, utils_1.logDebug)("Extracted trace context from SNS event");
                    return traceContext;
                }
                else {
                    (0, utils_1.logDebug)("Failed to extract trace context from SNS event");
                }
            }
            // Then try to extract trace context from _X_AMZN_TRACE_ID header (Upstream Java apps can
            // pass down Datadog trace id (parent id wrong) in the env in SNS case)
            if (process.env[xray_service_1.AMZN_TRACE_ID_ENV_VAR]) {
                var traceContext = xray_service_1.XrayService.extraceDDContextFromAWSTraceHeader(process.env[xray_service_1.AMZN_TRACE_ID_ENV_VAR]);
                if (traceContext) {
                    (0, utils_1.logDebug)("Extracted Datadog trace context from _X_AMZN_TRACE_ID");
                    return traceContext;
                }
                else {
                    (0, utils_1.logDebug)("No Datadog trace context found from _X_AMZN_TRACE_ID");
                }
            }
        }
        catch (error) {
            if (error instanceof Error) {
                (0, utils_1.logDebug)("Unable to extract trace context from SNS event", error);
            }
        }
        return null;
    };
    return SNSEventTraceExtractor;
}());
exports.SNSEventTraceExtractor = SNSEventTraceExtractor;
//# sourceMappingURL=sns.js.map