"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTPEventTraceExtractor = exports.HTTPEventSubType = exports.AUTHORIZING_REQUEST_ID_HEADER = void 0;
var event_validator_1 = require("../../../utils/event-validator");
var utils_1 = require("../../../utils");
exports.AUTHORIZING_REQUEST_ID_HEADER = "x-datadog-authorizing-requestid";
var HTTPEventSubType;
(function (HTTPEventSubType) {
    HTTPEventSubType["ApiGatewayV1"] = "api-gateway-rest-api";
    HTTPEventSubType["ApiGatewayV2"] = "api-gateway-http-api";
    HTTPEventSubType["ApiGatewayWebSocket"] = "api-gateway-websocket";
    HTTPEventSubType["Unknown"] = "unknown-sub-type";
})(HTTPEventSubType = exports.HTTPEventSubType || (exports.HTTPEventSubType = {}));
var HTTPEventTraceExtractor = /** @class */ (function () {
    function HTTPEventTraceExtractor(tracerWrapper, decodeAuthorizerContext) {
        if (decodeAuthorizerContext === void 0) { decodeAuthorizerContext = true; }
        this.tracerWrapper = tracerWrapper;
        this.decodeAuthorizerContext = decodeAuthorizerContext;
        this.decodeAuthorizerContext = decodeAuthorizerContext;
    }
    HTTPEventTraceExtractor.prototype.extract = function (event) {
        var e_1, _a;
        if (this.decodeAuthorizerContext) {
            // need to set the trace context if using authorizer lambda in authorizing (non-cached) cases
            try {
                var eventSourceSubType = HTTPEventTraceExtractor.getEventSubType(event);
                var injectedAuthorizerHeaders = HTTPEventTraceExtractor.getInjectedAuthorizerHeaders(event, eventSourceSubType);
                if (injectedAuthorizerHeaders !== null) {
                    var _traceContext = this.tracerWrapper.extract(injectedAuthorizerHeaders);
                    if (_traceContext === null)
                        return null;
                    (0, utils_1.logDebug)("Extracted trace context from authorizer event", { traceContext: _traceContext, event: event });
                    return _traceContext;
                }
            }
            catch (error) {
                if (error instanceof Error) {
                    (0, utils_1.logDebug)("Unable to extract trace context from authorizer event.", error);
                }
            }
        }
        var headers = event.headers;
        var lowerCaseHeaders = {};
        try {
            for (var _b = __values(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                lowerCaseHeaders[key.toLowerCase()] = headers[key];
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var traceContext = this.tracerWrapper.extract(lowerCaseHeaders);
        if (traceContext === null)
            return null;
        (0, utils_1.logDebug)("Extracted trace context from HTTP event", { traceContext: traceContext, event: event });
        return traceContext;
    };
    HTTPEventTraceExtractor.getEventSubType = function (event) {
        if (event_validator_1.EventValidator.isAPIGatewayEvent(event)) {
            return HTTPEventSubType.ApiGatewayV1;
        }
        if (event_validator_1.EventValidator.isAPIGatewayEventV2(event)) {
            return HTTPEventSubType.ApiGatewayV2;
        }
        if (event_validator_1.EventValidator.isAPIGatewayWebSocketEvent(event)) {
            return HTTPEventSubType.ApiGatewayWebSocket;
        }
        return HTTPEventSubType.Unknown;
    };
    HTTPEventTraceExtractor.getInjectedAuthorizerHeaders = function (event, eventSubType) {
        var _a;
        var authorizerHeaders = (_a = event === null || event === void 0 ? void 0 : event.requestContext) === null || _a === void 0 ? void 0 : _a.authorizer;
        if (!authorizerHeaders)
            return null;
        var rawDatadogData = authorizerHeaders._datadog;
        if (eventSubType === HTTPEventSubType.ApiGatewayV2) {
            rawDatadogData = authorizerHeaders.lambda._datadog;
        }
        if (!rawDatadogData)
            return null;
        var injectedData = JSON.parse(Buffer.from(rawDatadogData, "base64").toString());
        if (authorizerHeaders.integrationLatency > 0 ||
            event.requestContext.requestId === injectedData[exports.AUTHORIZING_REQUEST_ID_HEADER]) {
            return injectedData;
        }
        return null;
    };
    return HTTPEventTraceExtractor;
}());
exports.HTTPEventTraceExtractor = HTTPEventTraceExtractor;
//# sourceMappingURL=http.js.map