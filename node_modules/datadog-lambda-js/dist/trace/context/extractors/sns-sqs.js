"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SNSSQSEventTraceExtractor = void 0;
var utils_1 = require("../../../utils");
var xray_service_1 = require("../../xray-service");
var SNSSQSEventTraceExtractor = /** @class */ (function () {
    function SNSSQSEventTraceExtractor(tracerWrapper) {
        this.tracerWrapper = tracerWrapper;
    }
    SNSSQSEventTraceExtractor.prototype.extract = function (event) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        try {
            // First try to extract trace context from message attributes
            if ((_b = (_a = event === null || event === void 0 ? void 0 : event.Records) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.body) {
                var parsedBody = JSON.parse((_d = (_c = event === null || event === void 0 ? void 0 : event.Records) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.body);
                var messageAttribute = (_e = parsedBody === null || parsedBody === void 0 ? void 0 : parsedBody.MessageAttributes) === null || _e === void 0 ? void 0 : _e._datadog;
                if (messageAttribute === null || messageAttribute === void 0 ? void 0 : messageAttribute.Value) {
                    var headers = void 0;
                    if (messageAttribute.Type === "String") {
                        headers = JSON.parse(messageAttribute.Value);
                    }
                    else {
                        var decodedValue = Buffer.from(messageAttribute.Value, "base64").toString("ascii");
                        headers = JSON.parse(decodedValue);
                    }
                    var traceContext = this.tracerWrapper.extract(headers);
                    if (traceContext) {
                        (0, utils_1.logDebug)("Extracted trace context from SNS-SQS event");
                        return traceContext;
                    }
                    else {
                        (0, utils_1.logDebug)("Failed to extract trace context from SNS-SQS event");
                    }
                }
            }
            // Then try to extract trace context from attributes.AWSTraceHeader. (Upstream Java apps can
            // pass down Datadog trace context in the attributes.AWSTraceHeader in SQS case)
            if (((_h = (_g = (_f = event === null || event === void 0 ? void 0 : event.Records) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.attributes) === null || _h === void 0 ? void 0 : _h.AWSTraceHeader) !== undefined) {
                var traceContext = xray_service_1.XrayService.extraceDDContextFromAWSTraceHeader(event.Records[0].attributes.AWSTraceHeader);
                if (traceContext) {
                    (0, utils_1.logDebug)("Extracted trace context from SNS-SQS event attributes.AWSTraceHeader");
                    return traceContext;
                }
                else {
                    (0, utils_1.logDebug)("No Datadog trace context found from SNS-SQS event attributes.AWSTraceHeader");
                }
            }
        }
        catch (error) {
            if (error instanceof Error) {
                (0, utils_1.logDebug)("Unable to extract trace context from SNS-SQS event", error);
            }
        }
        return null;
    };
    return SNSSQSEventTraceExtractor;
}());
exports.SNSSQSEventTraceExtractor = SNSSQSEventTraceExtractor;
//# sourceMappingURL=sns-sqs.js.map