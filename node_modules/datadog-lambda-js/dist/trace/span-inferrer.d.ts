import { Context, EventBridgeEvent } from "aws-lambda";
import { SpanContext, TracerWrapper } from "./tracer-wrapper";
import { SpanWrapper } from "./span-wrapper";
export declare class SpanInferrer {
    private static serviceMapping;
    traceWrapper: TracerWrapper;
    service?: string;
    constructor(traceWrapper: TracerWrapper);
    private static initServiceMapping;
    static getServiceMapping(serviceName: string): string | undefined;
    createInferredSpan(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined, decodeAuthorizerContext?: boolean): any;
    isApiGatewayAsync(event: any): string;
    static determineServiceName(specificKey: string, genericKey: string, fallback: string): string;
    createInferredSpanForApiGateway(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined, decodeAuthorizerContext?: boolean): SpanWrapper;
    createInferredSpanForLambdaUrl(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): any;
    createInferredSpanForDynamoDBStreamEvent(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    createInferredSpanForSns(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    createInferredSpanForSqs(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    createInferredSpanForKinesis(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    createInferredSpanForS3(event: any, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    createInferredSpanForEventBridge(event: EventBridgeEvent<any, any>, context: Context | undefined, parentSpanContext: SpanContext | undefined): SpanWrapper;
    getResourcePath(event: any): string;
}
//# sourceMappingURL=span-inferrer.d.ts.map