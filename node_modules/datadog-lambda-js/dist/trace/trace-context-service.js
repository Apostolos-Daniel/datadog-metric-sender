"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TraceContextService = exports.SampleMode = exports.TraceSource = void 0;
var extractor_1 = require("./context/extractor");
var utils_1 = require("../utils");
var TraceSource;
(function (TraceSource) {
    TraceSource["Xray"] = "xray";
    TraceSource["Event"] = "event";
    TraceSource["DdTrace"] = "ddtrace";
})(TraceSource = exports.TraceSource || (exports.TraceSource = {}));
var SampleMode;
(function (SampleMode) {
    SampleMode[SampleMode["USER_REJECT"] = -1] = "USER_REJECT";
    SampleMode[SampleMode["AUTO_REJECT"] = 0] = "AUTO_REJECT";
    SampleMode[SampleMode["AUTO_KEEP"] = 1] = "AUTO_KEEP";
    SampleMode[SampleMode["USER_KEEP"] = 2] = "USER_KEEP";
})(SampleMode = exports.SampleMode || (exports.SampleMode = {}));
var TraceContextService = /** @class */ (function () {
    function TraceContextService(tracerWrapper, config) {
        this.tracerWrapper = tracerWrapper;
        this.config = config;
        this.rootTraceContext = null;
        this.traceExtractor = new extractor_1.TraceContextExtractor(this.tracerWrapper, this.config);
    }
    TraceContextService.prototype.extract = function (event, context) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = this;
                        return [4 /*yield*/, ((_a = this.traceExtractor) === null || _a === void 0 ? void 0 : _a.extract(event, context))];
                    case 1:
                        _b.rootTraceContext = _c.sent();
                        return [2 /*return*/, this.currentTraceContext];
                }
            });
        });
    };
    Object.defineProperty(TraceContextService.prototype, "currentTraceHeaders", {
        get: function () {
            var _a;
            var traceContext = this.currentTraceContext;
            if (traceContext === null)
                return {};
            return _a = {},
                _a[extractor_1.DATADOG_TRACE_ID_HEADER] = traceContext.toTraceId(),
                _a[extractor_1.DATADOG_PARENT_ID_HEADER] = traceContext.toSpanId(),
                _a[extractor_1.DATADOG_SAMPLING_PRIORITY_HEADER] = traceContext.sampleMode().toString(),
                _a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraceContextService.prototype, "currentTraceContext", {
        get: function () {
            if (this.rootTraceContext === null)
                return null;
            var traceContext = this.rootTraceContext;
            var currentDatadogContext = this.tracerWrapper.traceContext();
            if (currentDatadogContext) {
                (0, utils_1.logDebug)("set trace context from dd-trace with parent ".concat(currentDatadogContext.toTraceId()));
                return currentDatadogContext;
            }
            return traceContext;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(TraceContextService.prototype, "traceSource", {
        get: function () {
            var _a;
            return this.rootTraceContext !== null ? (_a = this.rootTraceContext) === null || _a === void 0 ? void 0 : _a.source : null;
        },
        enumerable: false,
        configurable: true
    });
    return TraceContextService;
}());
exports.TraceContextService = TraceContextService;
//# sourceMappingURL=trace-context-service.js.map