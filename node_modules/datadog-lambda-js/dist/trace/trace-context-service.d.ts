import { Context } from "aws-lambda";
import { DatadogTraceHeaders } from "./context/extractor";
import { TracerWrapper } from "./tracer-wrapper";
import { TraceConfig } from "./listener";
import { SpanContextWrapper } from "./span-context-wrapper";
export declare enum TraceSource {
    Xray = "xray",
    Event = "event",
    DdTrace = "ddtrace"
}
export declare enum SampleMode {
    USER_REJECT = -1,
    AUTO_REJECT = 0,
    AUTO_KEEP = 1,
    USER_KEEP = 2
}
export interface TraceContext {
    /**
     * @deprecated use `traceId`
     */
    traceID?: string;
    /**
     * @deprecated use `parentId`
     */
    parentID?: string;
    traceId?: string;
    parentId?: string;
    sampleMode: SampleMode;
    source: TraceSource;
}
export type TraceExtractor = (event: any, context: Context) => Promise<TraceContext> | TraceContext;
export declare class TraceContextService {
    private tracerWrapper;
    private config;
    rootTraceContext: SpanContextWrapper | null;
    private traceExtractor;
    constructor(tracerWrapper: TracerWrapper, config: TraceConfig);
    extract(event: any, context: Context): Promise<SpanContextWrapper | null>;
    get currentTraceHeaders(): Partial<DatadogTraceHeaders>;
    get currentTraceContext(): SpanContextWrapper | null;
    get traceSource(): TraceSource | null;
}
//# sourceMappingURL=trace-context-service.d.ts.map