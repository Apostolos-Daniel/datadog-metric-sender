export type MetricParameters = {
    value: number;
    name: string;
    tags: string[];
    metricTime?: Date;
};
export declare const METRICS_QUEUE_LIMIT = 1024;
/**
 * MetricsQueue is a queue for metrics that are enqueued when the MetricsListener is not initialized.
 *
 * When the MetricsListener is initialized, the metrics are sent to the listener for processing.
 * If the queue is full, all metrics are dropped, and new ones are enqueued. This might happen in two
 * scenarios:
 * 1. The MetricsListener is not initialized for a long time.
 * 2. The MetricsListener is initialized, but the amount of enqueued metrics is higher than the limit.
 */
export declare class MetricsQueue {
    private queue;
    /**
     * Enqueues a metric for later processing.
     * If the queue is full, all metrics are dropped. But the new metric is still enqueued.
     *
     * @param metric The metric to be enqueued.
     */
    push(metric: MetricParameters): void;
    pop(): MetricParameters | undefined;
    reverse(): void;
    reset(): void;
    get length(): number;
}
//# sourceMappingURL=queue.d.ts.map